{
  "name": "Qcefview",
  "tagline": " This project encapsulate the CEF into one QWidget named QCefView.",
  "body": "QCefView - A QWidget integrated with CEF\r\n===============\r\n\r\nQCefView is a QWidget integrated with Chrome Embedded Framework. You can use QCefView without writing any code relating to CEF code. This Qt widget is distributed in binary module.\r\n\r\nWhy use QCefView\r\n----------------\r\n\r\nThere are some UI frameworks developed with CEF, such as Electron and others. But Electron is over-encapsulated with CEF, you can only develop your application with it by writing javascript code. If you need to use native code in your application while CEF is also needed, Electron is not the good choose in this situation. You can do the integration by youself totally, of cause you need to do much work about the communication between web code and native code. And most time this is repetitive work.\r\n\r\nNow you can try to use QCefView to develop your application. Just use it like any other QWidgets. QCefWidget provides several methods to do communication between native C++ code and web javascript code. You don't need to write the communicating business logical. \r\n\r\n----------\r\n\r\nHow to use QCefView\r\n----------\r\n\r\n* First of all, check out the QCefView repository. \r\n\r\n* Deploy Qt SDK\r\n\r\n    Because there are different versions of Qt and Visual studio, you need to determine the version of Qt and Visual Studio you want to use in your development. As you know, once you have settled down with specified version of Visual Studio, you must use the corresponding version of Qt SDK. Here we use Visual Studio 2015. \r\n\r\n* Download CEF binary distribution files\r\n    \r\n    We use the binary distribution version, you can get them from here\r\n\r\n    > [https://cefbuilds.com/](https://cefbuilds.com/)\r\n    \r\n    Here we use branch 2526, download the **cef_binary_3.2526.1373.gb660893_windows32**. \r\n\r\n* Build **libcef_dll_wrapper.lib**\r\n\r\n    You need to build the libcef_dll_wrapper.lib with your development environment\r\n    > **Note**:\r\n    \r\n    > - Use the same configuration of Runtime Library in all projects of your application solution \r\n\r\n* Collect CEF files\r\n    \r\n    Put header files, lib files and binary files into QCefView\\dep\\cef folder, keep the structure of this folder the same with [this](https://github.com/tishion/QCefView/tree/master/dep/cef)\r\n   \r\n* Build QCefSDK & Test Demo\r\n    \r\n    Open the QCefView solution file and and build all the projects. Make sure to build the Test project last. After you build the QCefView you will get the QCefViewSdk folder, this includes all the files QCefView needed. You can deploy this SDK into your development environment and develop Qt+CEF applications with it.\r\n\r\nnow you can run the test demo\r\n![](https://raw.githubusercontent.com/tishion/QCefView/gh-pages/images/Test.jpg)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}